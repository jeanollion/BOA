/* 
 * Copyright (C) 2018 Jean Ollion
 *
 * This File is part of BOA
 *
 * BOA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * BOA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BOA.  If not, see <http://www.gnu.org/licenses/>.
 */
package boa.plugins.plugins.measurements;

import boa.configuration.parameters.BooleanParameter;
import boa.gui.image_interaction.IJImageDisplayer;
import boa.configuration.parameters.Parameter;
import boa.configuration.parameters.ObjectClassParameter;
import boa.data_structure.Measurements;
import boa.data_structure.Region;
import boa.data_structure.StructureObject;
import boa.data_structure.Voxel;
import boa.image.BoundingBox;
import boa.image.Image;
import java.util.ArrayList;
import java.util.List;
import boa.measurement.BasicMeasurements;
import boa.measurement.GeometricalMeasurements;
import boa.measurement.MeasurementKey;
import boa.measurement.MeasurementKeyObject;
import org.apache.commons.math3.linear.RealMatrix;
import boa.plugins.Measurement;
import boa.plugins.ToolTip;
import boa.utils.geom.Point;

/**
 *
 * @author jollion
 */
public class BacteriaTrackingAttributes implements Measurement, ToolTip {
    protected ObjectClassParameter bacteria = new ObjectClassParameter("Bacteria Structure", -1, false, false);
    protected Parameter[] parameters = new Parameter[]{bacteria};
    
    public BacteriaTrackingAttributes(){}
    
    public BacteriaTrackingAttributes(int bacteriaStructureIdx){
        this.bacteria.setSelectedIndex(bacteriaStructureIdx);
    }
    
    @Override
    public String getToolTipText() {
        return "Extract track attributes generated by the bacteria tracker";
    }
    
    @Override
    public int getCallStructure() {
        return bacteria.getSelectedClassIdx();
    }
    @Override
    public boolean callOnlyOnTrackHeads() {
        return false;
    }
    @Override
    public List<MeasurementKey> getMeasurementKeys() {
        int structureIdx = bacteria.getSelectedClassIdx();
        ArrayList<MeasurementKey> res = new ArrayList<>();
        res.add(new MeasurementKeyObject("SizeRatio", structureIdx));
        res.add(new MeasurementKeyObject("TrackErrorSizeRatio", structureIdx));
        res.add(new MeasurementKeyObject("EndOfChannelContact", structureIdx));
        res.add(new MeasurementKeyObject("TruncatedDivision", structureIdx));
        return res;
    }

    @Override public void performMeasurement(StructureObject object) {
        Measurements m = object.getMeasurements();
        if (object.getAttribute("EndOfChannelContact")!=null) m.setValue("EndOfChannelContact", object.getAttribute("EndOfChannelContact", Double.NaN));
        else m.setValue("EndOfChannelContact", null); // remove
        if (object.getAttribute("TruncatedDivision")!=null) m.setValue("TruncatedDivision", object.getAttribute("TruncatedDivision", false));
        else m.setValue("TruncatedDivision", null); // remove
        if (object.getAttributes().get("SizeRatio")!=null)  m.setValue("SizeRatio", object.getAttribute("SizeRatio", Double.NaN));
        else m.setValue("SizeRatio", null); // remove
        if (Boolean.TRUE.equals(object.getAttribute("TrackErrorSizeRatio"))) m.setValue("TrackErrorSizeRatio", true);
        else m.setValue("TrackErrorSizeRatio", null); // remove
    }
    
    @Override
    public Parameter[] getParameters() {
        return parameters;
    }

    
    
}
